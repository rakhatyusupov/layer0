let myFilterShader;
let gui;

const params = {
  regenerate: () => generateComposition(),
  gridDensity: 8,
  primitiveSize: 20,
  radialProbability: 0.5
};

// –°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
const PRIMITIVES = {
  circle: function(x, y, size) {
    ellipse(x, y, size, size);
  },
  
  square: function(x, y, size) {
    rectMode(CENTER);
    rect(x, y, size, size);
  },
  
  triangle: function(x, y, size) {
    const h = size * 0.866; // –≤—ã—Å–æ—Ç–∞ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    triangle(x, y - h/2, x - size/2, y + h/2, x + size/2, y + h/2);
  },
  
  line_horizontal: function(x, y, size) {
    line(x - size/2, y, x + size/2, y);
  },
  
  line_vertical: function(x, y, size) {
    line(x, y - size/2, x, y + size/2);
  },
  
  cross: function(x, y, size) {
    line(x - size/2, y, x + size/2, y);
    line(x, y - size/2, x, y + size/2);
  },
  
  ring: function(x, y, size) {
    noFill();
    strokeWeight(2);
    ellipse(x, y, size, size);
    fill(0);
    strokeWeight(1);
  },
  
  dot: function(x, y, size) {
    ellipse(x, y, size * 0.3, size * 0.3);
  },
  
  diagonal_tl_br: function(x, y, size) {
    line(x - size/2, y - size/2, x + size/2, y + size/2);
  },
  
  diagonal_tr_bl: function(x, y, size) {
    line(x + size/2, y - size/2, x - size/2, y + size/2);
  },
  
  x_shape: function(x, y, size) {
    line(x - size/2, y - size/2, x + size/2, y + size/2);
    line(x + size/2, y - size/2, x - size/2, y + size/2);
  },
  
  arc_tl: function(x, y, size) {
    noFill();
    strokeWeight(2);
    arc(x, y, size, size, PI, PI + HALF_PI);
    fill(0);
    strokeWeight(1);
  },
  
  arc_tr: function(x, y, size) {
    noFill();
    strokeWeight(2);
    arc(x, y, size, size, -HALF_PI, 0);
    fill(0);
    strokeWeight(1);
  },
  
  arc_bl: function(x, y, size) {
    noFill();
    strokeWeight(2);
    arc(x, y, size, size, HALF_PI, PI);
    fill(0);
    strokeWeight(1);
  },
  
  arc_br: function(x, y, size) {
    noFill();
    strokeWeight(2);
    arc(x, y, size, size, 0, HALF_PI);
    fill(0);
    strokeWeight(1);
  }
};

// –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
const PRIMITIVE_NAMES = Object.keys(PRIMITIVES);

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–∞
function drawPrimitive(primitiveName, x, y, size) {
  if (PRIMITIVES[primitiveName]) {
    PRIMITIVES[primitiveName](x, y, size);
  }
}

// –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
class Grid {
  constructor(x, y, w, h, density) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.density = density;
    this.isRadial = random() < params.radialProbability;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —Å–µ—Ç–∫–∏
  getRandomPoint() {
    if (this.isRadial) {
      return this.getRadialPoint();
    } else {
      return this.getTypographicPoint();
    }
  }
  
  // –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞
  getTypographicPoint() {
    const cellW = this.w / this.density;
    const cellH = this.h / this.density;
    
    const col = floor(random(this.density));
    const row = floor(random(this.density));
    
    return {
      x: this.x + col * cellW + cellW / 2,
      y: this.y + row * cellH + cellH / 2
    };
  }
  
  // –†–∞–¥–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞
  getRadialPoint() {
    const centerX = this.x + this.w / 2;
    const centerY = this.y + this.h / 2;
    const maxRadius = min(this.w, this.h) / 2;
    
    const rings = this.density;
    const ring = floor(random(rings));
    const radius = (ring + 1) * (maxRadius / rings);
    
    const pointsInRing = max(6, ring * 6);
    const angleStep = TWO_PI / pointsInRing;
    const angle = floor(random(pointsInRing)) * angleStep;
    
    return {
      x: centerX + cos(angle) * radius,
      y: centerY + sin(angle) * radius
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏
function generateSection(sectionX, sectionY, sectionW, sectionH) {
  const grid = new Grid(sectionX, sectionY, sectionW, sectionH, params.gridDensity);
  const numPrimitives = floor(random(5, 15));
  
  push();
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç—å—é —Å–µ–∫—Ü–∏–∏
  
  for (let i = 0; i < numPrimitives; i++) {
    const point = grid.getRandomPoint();
    const primitiveName = random(PRIMITIVE_NAMES);
    drawPrimitive(primitiveName, point.x, point.y, params.primitiveSize);
  }
  
  pop();
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
function generateComposition() {
  background(255);
  stroke(0);
  fill(0);
  strokeWeight(1);
  
  const w = width / 2;
  const h = height / 2;
  
  // 4 —Å–µ–∫—Ü–∏–∏
  generateSection(0, 0, w, h);       // –í–µ—Ä—Ö–Ω—è—è –ª–µ–≤–∞—è
  generateSection(w, 0, w, h);       // –í–µ—Ä—Ö–Ω—è—è –ø—Ä–∞–≤–∞—è
  generateSection(0, h, w, h);       // –ù–∏–∂–Ω—è—è –ª–µ–≤–∞—è
  generateSection(w, h, w, h);       // –ù–∏–∂–Ω—è—è –ø—Ä–∞–≤–∞—è
  
  // –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
  stroke(200);
  line(w, 0, w, height);
  line(0, h, width, h);
  stroke(0);
}

function preload() {
  // Load the filter shader
  myFilterShader = loadShader("filter.vert", "filter.frag");
}

function setup() {
  createCanvas(800, 800);
  
  // Setup lil-gui
  gui = new lil.GUI();
  
  gui.add(params, 'regenerate').name('üîÑ Regenerate');
  gui.add(params, 'gridDensity', 4, 16, 1).name('Grid Density').onChange(() => generateComposition());
  gui.add(params, 'primitiveSize', 10, 50, 1).name('Primitive Size').onChange(() => generateComposition());
  gui.add(params, 'radialProbability', 0, 1, 0.1).name('Radial Probability').onChange(() => generateComposition());
  
  // –ü–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  generateComposition();
}

function draw() {
  // –°—Ç–∞—Ç–∏—á–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–µ–π–º
  // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  // filterShader(myFilterShader);
}

function keyPressed() {
  // –ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  if (key === ' ') {
    generateComposition();
  }
  
  // –ù–∞–∂–º–∏—Ç–µ 's' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  if (key === 's' || key === 'S') {
    saveCanvas('generative_grid', 'png');
  }
}
